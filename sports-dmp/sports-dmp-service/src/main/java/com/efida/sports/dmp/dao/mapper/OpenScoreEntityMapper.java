package com.efida.sports.dmp.dao.mapper;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.efida.sports.dmp.dao.entity.OpenScoreEntity;

public interface OpenScoreEntityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table open_score
     *
     * @mbggenerated
     */
    int insert(OpenScoreEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table open_score
     *
     * @mbggenerated
     */
    int insertSelective(OpenScoreEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table open_score
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(OpenScoreEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table open_score
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(OpenScoreEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table open_score_rank
     *
     * @mbggenerated
     */
    OpenScoreEntity selectByPrimaryKey(Long id);

    /**
     * 
     * 
     * @param map
     * @return
     */
    List<OpenScoreEntity> selectUnSyncRecord(Map<String, Object> map);

    /**
     * 
     * 
     * @param unitCode
     * @param idempotentId
     * @return
     */
    OpenScoreEntity getScoreInfoByIdempotent(@Param(value = "unitCode") String unitCode,
                                             @Param(value = "idempotentId") String idempotentId);

    /**
     * unitCode
     * matchCode
     * eventCode
     * playerCode
     * scoreName
     * start
     * limit
     * @title
     * @methodName
     * @author wangyi
     * @description
     * @param map
     * @return
     */
    List<OpenScoreEntity> selectByProp(Map<String, Object> map);

    /**
     * 查询成绩信息
     * @title
     * @methodName
     * @author wangyi
     * @description
     * @param params
     * @return
     */
    List<OpenScoreEntity> selectPageLikeParams(Map<String, Object> params);

    /**
     * 查询用户成绩信息
     * 
     * @param playerPhone
     * @param eventCode
     * @return
     */
    List<OpenScoreEntity> queryByPlayerPhoneAndEventCode(@Param(value = "playerPhone") String playerPhone,
                                                         @Param(value = "eventCode") String eventCode);

    /**
     * 获取一条成绩数据  按成绩倒序
     * 
     * @param queryParams
     * @return
     */
    OpenScoreEntity getScoreOrderByScoreDesc(Map<String, Object> queryParams);

    /**
     * 获取一条成绩数据  按成绩升序
     * 
     * @param queryParams
     * @return
     */
    OpenScoreEntity getScoreOrderByScoreAsc(Map<String, Object> queryParams);

    /**
     * 根据条件查询成绩列表 
     * 
     * @param queryParams
     * @return
     */
    List<OpenScoreEntity> queryScores(Map<String, Object> queryParams);

    /**
     * 
     * 
     * @return
     */
    List<String> queryUnitScoreDate();

    /**
     * 承办方完赛人数统计
     * 
     * @param map
     * @return
     */
   // List<Map<String, Object>> queryUnitScoreCount(Map<String, Object> map);

    /**
     * 承办方完赛人数统计
     * 
     * @param map
     * @return
     */
   List<Map<String, Object>> queryUnitScoreByCount(Map<String, Object> map);

    /**
     * 赛事完赛人数统计
     * 
     * @param map
     * @return
     */
   // List<Map<String, Object>> queryMatchScoreCount(Map<String, Object> map);

    /**
     * 赛事完赛人数统计
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> queryMatchScoreByCount(Map<String, Object> map);

    /**
     * 通过比赛配置查询 成绩信息
     * 
     * @param queryParams
     * @return
     */
    List<OpenScoreEntity> queryCompetitionScores(Map<String, Object> queryParams);

    /**
     * 
     * 查询需要运算的赛事信息
     * @param map
     * @return
     */
    List<String> queryUnComputeEventCodeByMap(Map<String, Object> map);

    List<OpenScoreEntity> queryUnMatchRecordByMap(Map<String, Object> map);

    /**
     * 通过 创建时间：gmt_create 范围 查询记录。 
     * @param queryParams
     * @return
     */
    List<OpenScoreEntity> queryOpenScoreByDateForCert(Map<String, Object> queryParams);

     
}