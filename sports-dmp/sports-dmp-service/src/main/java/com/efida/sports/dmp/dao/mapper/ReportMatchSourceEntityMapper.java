package com.efida.sports.dmp.dao.mapper;

import java.util.List;
import java.util.Map;

import com.efida.sports.dmp.dao.entity.ReportMatchSourceEntity;

public interface ReportMatchSourceEntityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_match_source
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_match_source
     *
     * @mbggenerated
     */
    int insert(ReportMatchSourceEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_match_source
     *
     * @mbggenerated
     */
    int insertSelective(ReportMatchSourceEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_match_source
     *
     * @mbggenerated
     */
    ReportMatchSourceEntity selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_match_source
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(ReportMatchSourceEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_match_source
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(ReportMatchSourceEntity record);

    /**
     * 
     * 根据matchCode 和   applyTimeDay 查询报名人数
     * @param map
     * @return
     */
    List<ReportMatchSourceEntity> queryMatchEnrollByCode(Map<String, Object> map);

    /**
     * 分页查询赛事报名渠道
     * 
     * @param map
     * @return
     */
    List<ReportMatchSourceEntity> countMatchEnrollByDetailParams(Map<String, Object> map);

    /**
     * 分页查询总数
     * 
     * @return
     */
    Map<String, Object> countTotalNumer(Map<String, Object> map);

    /**
     * 查询官方报名人数（图形）
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> officialEnrollCount(Map<String, Object> map);

    /**
    * 官方报名人数分页查询
    * 
    * @param map
    * @return
    */
    List<ReportMatchSourceEntity> officialEnrollByParams(Map<String, Object> map);

    /**
     * 官方报名人数分页查询
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> officialEnrollByDetailParams(Map<String, Object> map);

    /**
     * 查询赛事名称
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> queryMatchNameByParams(Map<String, Object> map);

    /**
     * 获取赛事TOP5数据
     * 
     * @return
     */
    List<Map<String, Object>> matchEnrollTop5();

    /**
     * 获取官方赛事TOP5数据
     * 
     * @return
     */
    List<Map<String, Object>> officialEnrollTop5();

    /**
     * 根据条件查询官方赛事
     * 
     * @param likeParams
     * @param inParams
     * @return
     */
    List<Map<String, Object>> queryCountMatchEnrollByParams(Map<String, Object> map);

    /**
     * 根据条件统计承办方数据
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> queryCountUnitEnrollByParams(Map<String, Object> map);

    /**
     * 统计所有承办方报名数据
     * 
     * @return
     */
    List<Map<String, Object>> countAllUnitEnroll();

    /**
     * 查询总报名数
     * 
     * @return
     */
    Map<String, Object> countEnrollByParams(Map<String, Object> map);

}