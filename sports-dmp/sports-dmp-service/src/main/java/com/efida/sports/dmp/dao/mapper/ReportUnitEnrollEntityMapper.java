package com.efida.sports.dmp.dao.mapper;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.efida.sports.dmp.dao.entity.ReportUnitEnrollEntity;

public interface ReportUnitEnrollEntityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_unit_enroll
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_unit_enroll
     *
     * @mbggenerated
     */
    int insert(ReportUnitEnrollEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_unit_enroll
     *
     * @mbggenerated
     */
    int insertSelective(ReportUnitEnrollEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_unit_enroll
     *
     * @mbggenerated
     */
    ReportUnitEnrollEntity selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_unit_enroll
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(ReportUnitEnrollEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table report_unit_enroll
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(ReportUnitEnrollEntity record);

    /**
     * 
     * 根据unitCode 和   applyTimeDay 查询报名人数
     * @param map
     * @return
     */
    List<ReportUnitEnrollEntity> queryEnrollByCode(Map<String, Object> map);

    /**
     * 根据承办方unitCode, applyTimeDay统计报名人数 
     * 
     * @param map
     * @return
     */
    Map<String, Object> countUnitEnrollByCode(Map<String, Object> map);

    /**
     * 获取承办方总报名数
     * 
     * @return
     */
    Map<String, Object> countTotalUnitEnroll(Map<String, Object> map);

    /**
     * 分组统计承办方报名人数
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> countUnitEnrollGroup();

    /**
     * 根据条件查询承办方报名人数
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> countUnitEnrollByParams(Map<String, Object> map);

    /**
     * 获取承办方默认前5数据
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> queryTop5UnitEnroll(@Param(value = "startTime") Date startTime);

    /**
     * 根据条件查询承办方报名人数
     * 
     * @param map
     * @return
     */
    List<Map<String, Object>> countUnitEnrollByDetailParams(Map<String, Object> map);

    /**
     * 分页查询承办方数据
     * 
     * @param map
     * @return
     */
    List<ReportUnitEnrollEntity> countUnitEnrollByPages(Map<String, Object> map);

    /**
     * 根据日期和承办方编号查询数据
     * 
     * @param applyTimeDay
     * @param unitCode
     * @return
     */
    List<ReportUnitEnrollEntity> countUnitEnrollByGrah(@Param(value = "applyTimeDay") String applyTimeDay,
                                                       @Param(value = "unitCode") String unitCode);

    /**
     * 查询所有承办方数据
     * 
     * @return
     */
    List<ReportUnitEnrollEntity> queryAllUnitEnroll();

    /**
     * 根据排序获取报名开始日期 asc
     * 
     * @param sortParam
     * @return
     */
    String queryUnitEnrollStartTime();

    /**
     * 根据unitCode获取承办方报名人数
     * 
     * @param unitCode
     * @return
     */
    List<Map<String, Object>> queryAllUnitEnrollByCode(@Param(value = "unitCode") String unitCode);

    /**
     *获取报名总人数 需要按手机号和用户名称去重
     * 
     * @return
     */
    int getTotalApplyPeople();

    /**
     * 获取完赛总人数 需要按手机号和用户名称去重
     * 
     * @return
     */
    int getTotalFinishPeople();

}