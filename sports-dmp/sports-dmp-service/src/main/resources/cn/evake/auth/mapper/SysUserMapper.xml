<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.evake.auth.dao.mapper.SysUserMapper" >
	<resultMap id="BaseResultMap" type="cn.evake.auth.dao.model.SysUser" >
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="uuid" property="uuid" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="real_name" property="realName" jdbcType="VARCHAR" />
		<result column="nick_name" property="nickName" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="avatar" property="avatar" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="VARCHAR" />
		<result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="identity" property="identity" jdbcType="VARCHAR" />
		<result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
		<result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Base_Column_List" >
    id, uuid, user_name, password, real_name, nick_name, email, avatar, phone, gender, 
    status, last_login_time, remark, identity, gmt_create, gmt_modified
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 'false' as QUERYID,
		<include refid="Base_Column_List" />
    from sys_user
    where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_user
    where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="cn.evake.auth.dao.model.SysUser"  useGeneratedKeys="true" keyProperty="id">
    insert into sys_user (id, uuid, user_name, 
      password, real_name, nick_name, 
      email, avatar, phone, 
      gender, status, last_login_time, 
      remark, identity, gmt_create, 
      gmt_modified)
    values (#{id,jdbcType=INTEGER}, #{uuid,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{gender,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{lastLoginTime,jdbcType=TIMESTAMP}, 
      #{remark,jdbcType=VARCHAR}, #{identity,jdbcType=VARCHAR}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModified,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="cn.evake.auth.dao.model.SysUser"  useGeneratedKeys="true" keyProperty="id">
    insert into sys_user
		<trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="id != null" >
        id,
			</if>
			<if test="uuid != null" >
        uuid,
			</if>
			<if test="userName != null" >
        user_name,
			</if>
			<if test="password != null" >
        password,
			</if>
			<if test="realName != null" >
        real_name,
			</if>
			<if test="nickName != null" >
        nick_name,
			</if>
			<if test="email != null" >
        email,
			</if>
			<if test="avatar != null" >
        avatar,
			</if>
			<if test="phone != null" >
        phone,
			</if>
			<if test="gender != null" >
        gender,
			</if>
			<if test="status != null" >
        status,
			</if>
			<if test="lastLoginTime != null" >
        last_login_time,
			</if>
			<if test="remark != null" >
        remark,
			</if>
			<if test="identity != null" >
        identity,
			</if>
			<if test="gmtCreate != null" >
        gmt_create,
			</if>
			<if test="gmtModified != null" >
        gmt_modified,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="id != null" >
        #{id,jdbcType=INTEGER},
			</if>
			<if test="uuid != null" >
        #{uuid,jdbcType=VARCHAR},
			</if>
			<if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
			</if>
			<if test="password != null" >
        #{password,jdbcType=VARCHAR},
			</if>
			<if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
			</if>
			<if test="nickName != null" >
        #{nickName,jdbcType=VARCHAR},
			</if>
			<if test="email != null" >
        #{email,jdbcType=VARCHAR},
			</if>
			<if test="avatar != null" >
        #{avatar,jdbcType=VARCHAR},
			</if>
			<if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
			</if>
			<if test="gender != null" >
        #{gender,jdbcType=VARCHAR},
			</if>
			<if test="status != null" >
        #{status,jdbcType=VARCHAR},
			</if>
			<if test="lastLoginTime != null" >
        #{lastLoginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
			</if>
			<if test="identity != null" >
        #{identity,jdbcType=VARCHAR},
			</if>
			<if test="gmtCreate != null" >
        #{gmtCreate,jdbcType=TIMESTAMP},
			</if>
			<if test="gmtModified != null" >
        #{gmtModified,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="cn.evake.auth.dao.model.SysUser" >
    update sys_user
		<set >
			<if test="uuid != null" >
        uuid = #{uuid,jdbcType=VARCHAR},
			</if>
			<if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="realName != null" >
        real_name = #{realName,jdbcType=VARCHAR},
			</if>
			<if test="nickName != null" >
        nick_name = #{nickName,jdbcType=VARCHAR},
			</if>
			<if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="avatar != null" >
        avatar = #{avatar,jdbcType=VARCHAR},
			</if>
			<if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="gender != null" >
        gender = #{gender,jdbcType=VARCHAR},
			</if>
			<if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
			</if>
			<if test="lastLoginTime != null" >
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="identity != null" >
        identity = #{identity,jdbcType=VARCHAR},
			</if>
			<if test="gmtCreate != null" >
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
			</if>
			<if test="gmtModified != null" >
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
			</if>
		</set>
    where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="cn.evake.auth.dao.model.SysUser" >
    update sys_user
    set uuid = #{uuid,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      identity = #{identity,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
	</update>
  
	<!--以下为自定义数据-->
	<select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
		<include refid="Base_Column_List" />
    from sys_user
    where user_name = #{username}
	</select>
  
	<!--通过UUID查询-->
	<select id="selectUuid" resultMap="BaseResultMap">
    select * from sys_user where uuid=#{uuid} limit 0,1
	</select>
  
	<select id="selectUserByKeyword" resultMap="BaseResultMap">
		select
		*
		from sys_user where 1=1
		<if test="keyword != null and keyword!='' ">
			and(
			user_name like concat('%',#{keyword},'%')
			or real_name like concat('%',#{keyword},'%')
			or nick_name like concat('%',#{keyword},'%')
			or phone like concat('%',#{keyword},'%')
			)
		</if>
		order by id desc
		limit  #{countOffset},#{pageSize}
	</select>
	
	<select id="countUserByKeyword" resultType="int">
		select
		count(*)
		from sys_user where 1=1
		<if test="keyword != null">
			and(
			user_name like concat('%',#{keyword},'%')
			or real_name like concat('%',#{keyword},'%')
			or nick_name like concat('%',#{keyword},'%')
			or phone like concat('%',#{keyword},'%')
			)
		</if>
	</select>
	
	<select id="selectUserByRolesAndKeyword" resultMap="BaseResultMap">
		select distinct sys_user.* from sys_user left join sys_user_role on sys_user.uuid=sys_user_role.uuid 
		where 1=1
		<if test="keyword != null">
			and(
			sys_user.user_name like concat('%',#{keyword},'%')
			or sys_user.real_name like concat('%',#{keyword},'%')
			or sys_user.nick_name like concat('%',#{keyword},'%')
			or sys_user.phone like concat('%',#{keyword},'%')
			)
		</if>
		<if test="roleIds != null and roleIds.size() > 0"> 
			and  sys_user_role.role_id in 
			<foreach collection="roleIds" index="index" item="item" open="(" separator="," close=")">  
            #{item}
			</foreach>
		</if>
		limit  #{countOffset},#{pageSize}
	</select>
	
	<select id="countUserByRolesAndKeyword" resultType="int">
		select  count(distinct sys_user.id) from sys_user left join sys_user_role on sys_user.uuid=sys_user_role.uuid 
		where 1=1
		<if test="keyword != null">
			and(
			sys_user.user_name like concat('%',#{keyword},'%')
			or sys_user.real_name like concat('%',#{keyword},'%')
			or sys_user.nick_name like concat('%',#{keyword},'%')
			or sys_user.phone like concat('%',#{keyword},'%')
			)
		</if>
		<if test="roleIds != null and roleIds.size() > 0"> 
			and  sys_user_role.role_id in 
			<foreach collection="roleIds" index="index" item="item" open="(" separator="," close=")">  
            #{item}  
			</foreach>
		</if>
	</select>
  
</mapper>